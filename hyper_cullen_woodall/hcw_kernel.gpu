/* hcw_kernel.gpu -- (C) Mark Rodenkirch

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.
 */
 
#define MAX_POWERS 20

#if defined(USE_OPENCL)
#pragma OPENCL EXTENSION cl_khr_int64_extended_atomics: enable
#define MUL_HI          mul_hi

void collectFactor(uint    b,
                   uint    n,
                   int     sign,
                   ulong   p,
 volatile __global uint   *factorCount,
          __global ulong4 *factors);
#else
void collectFactor(uint        b,
                   uint        n,
                   int         sign,
                   ulong       p,
   volatile device atomic_int *factorCount,
            device ulong4     *factors);
#endif
          
ulong mmmInvert(ulong _p);
ulong mmmOne(ulong _p);
ulong mmmR2(ulong _p, ulong _q, ulong _one);
ulong mmmAdd(ulong a, ulong b, ulong _p);
ulong mmmSub(ulong a, ulong b, ulong _p);
ulong mmmMulmod(ulong a, ulong b, ulong _p, ulong _q);
ulong mmmNToRes(ulong n, ulong _p, ulong _q, ulong _r2);
ulong mmmResToN(ulong res, ulong _p, ulong _q);
ulong mmmPowmod(ulong resbase, ulong exp, ulong _p, ulong _q, ulong _one);

__kernel void hcw_kernel(__global const ulong  *primes,
                         __global const uint   *terms,
                volatile __global       uint   *factorCount,
                         __global       ulong4 *factors)
{
   uint   gid = get_global_id(0);

   uint   termIndex;
   uint   currentB;
   uint   currentN, previousN;
   uint   pIndex;

   ulong  thePrime = primes[gid];
   ulong  magicNumber;
   ulong  magicShift;
   ulong  resB, resN;
   ulong  resBexpN, resTemp;
   ulong  resNexpB;

   ulong  resPowers[MAX_POWERS];

   if (thePrime == 0)
      return;

   ulong _q = mmmInvert(thePrime);
   ulong _one = mmmOne(thePrime);
   ulong _r2 = mmmR2(thePrime, _q, _one);
   ulong _zero = mmmNToRes(0, thePrime, _q, _r2);
   
#ifdef IS_PLUS
   ulong _pm1 = mmmSub(_zero, _one, thePrime);
#endif 

   termIndex = 0;

   while (terms[termIndex] > 0)
   {
      currentB = terms[termIndex];
      resB = mmmNToRes(currentB, thePrime, _q, _r2);
      termIndex++;

      // If we have at least one n for this b
      if (terms[termIndex] > 0)
      {
         currentN = terms[termIndex];
         resN = mmmNToRes(currentN, thePrime, _q, _r2);
                
         resPowers[0] = _one;
         resPowers[1] = resB;
         
         // Multiply successive terms by b^2 (mod p)
         for (pIndex=2; pIndex<=MAX_POWERS; pIndex++)
             resPowers[pIndex] = mmmMulmod(resPowers[pIndex-1], resB, thePrime, _q);
         
         resBexpN = mmmPowmod(resB, currentN, thePrime, _q, _one);
         resNexpB = mmmPowmod(resN, currentB, thePrime, _q, _one);
            
         ulong res = mmmMulmod(resBexpN, resNexpB, thePrime, _q);

#ifdef IS_MINUS
         // b^n * n^b - 1 = 0(mod p)
         if (res == _one)
            collectFactor(currentB, currentN, -1, thePrime, factorCount, factors);
#endif

#ifdef IS_PLUS
         // b^n * n^b + 1 == 0(mod p)
         if (res == _pm1)
            collectFactor(currentB, currentN, +1, thePrime, factorCount, factors);
#endif

         previousN = currentN;
  
         //  The first n for this x
         termIndex++;
         while (terms[termIndex] > 0)
         {
            currentN = terms[termIndex];
      
            pIndex = currentN - previousN;
            
            if (pIndex > MAX_POWERS)
               resTemp = mmmPowmod(resB, currentN - previousN, thePrime, _q, _one);
            else
               resTemp = resPowers[pIndex];

            // We have b^prevN (mod p).
            // Now compute b^n (mod p) as (b^prevN * b^(n-prevN) (mod p)
            resBexpN = mmmMulmod(resBexpN, resTemp, thePrime, _q);

            resN = mmmNToRes(currentN, thePrime, _q, _r2);
            resNexpB = mmmPowmod(resN, currentB, thePrime, _q, _one);

            ulong res = mmmMulmod(resBexpN, resNexpB, thePrime, _q);
            
#ifdef IS_MINUS
            // b^n * n^b - 1 = 0(mod p)
            if (res == _one)
               collectFactor(currentB, currentN, -1, thePrime, factorCount, factors);
#endif

#ifdef IS_PLUS
            // b^n * n^b + 1 = 0(mod p)
            if (res == _pm1)
               collectFactor(currentB, currentN, +1, thePrime, factorCount, factors);
#endif
               
            termIndex++;
            previousN = currentN;
         }
      }
      
      // Get the next b
      termIndex++;
   };
}

// Convert a residual back to n
ulong mmmResToN(ulong res, ulong _p, ulong _q)
{
   return mmmMulmod(res, 1, _p, _q);
}

ulong mmmInvert(ulong _p)
{
   ulong p_inv = 1;
   ulong prev = 0;
   
   while (p_inv != prev)
   {
      prev = p_inv;
      p_inv *= (2 - _p * p_inv);
   }
   
   return p_inv;
}

// Compute the residual of 1 (mod p)
ulong mmmOne(ulong _p)
{
   return ((-_p) % _p);
}

// Compute the residual of 2^64 (mod p)
ulong mmmR2(ulong _p, ulong _q, ulong _one)
{
	ulong t = mmmAdd(_one, _one, _p);
   
   t = mmmAdd(t, t, _p);   // 4
	for (size_t i=0; i<5; i++)
      t = mmmMulmod(t, t, _p, _q);   // 4^{2^5} = 2^64
      
	return t;
}

ulong mmmAdd(ulong a, ulong b, ulong _p)
{
   ulong c = (a >= _p - b) ? _p : 0;
   return a + b - c;
}

ulong mmmSub(ulong a, ulong b, ulong _p)
{
   ulong c = (a < b) ? _p : 0;
   return a - b + c;
}

// Compute the residual of n (mod p)
ulong mmmNToRes(ulong n, ulong _p, ulong _q, ulong _r2)
{
   return mmmMulmod(n, _r2, _p, _q);
}

ulong mmmMulmod(ulong a, ulong b, ulong _p, ulong _q)
{
   ulong lo = a * b;
   ulong hi = MUL_HI(a, b);
   
   ulong m = lo * _q;
   
   ulong hi2 = MUL_HI(m, _p);
   long r = (long) hi - (long) hi2;

   if (r < 0)
      return (ulong) (r + _p);
      
   return (ulong) r;
}

// Compute the residual of b ^ n (mod p)
ulong   mmmPowmod(ulong resbase, ulong exp, ulong _p, ulong _q, ulong _one)
{
   ulong x = resbase;
   ulong y = _one;
   
   while (true)
   {
      if (exp & 1)
         y = mmmMulmod(x, y, _p, _q);

      exp >>= 1;

      if (!exp)
         return y;

      x = mmmMulmod(x, x, _p, _q);
   }

   // Should never get here
   return 0;
}

#if defined(USE_OPENCL)
void collectFactor(uint    b,
                   uint    n,
                   int     sign,
                   ulong   p,
 volatile __global uint   *factorCount,
          __global ulong4 *factors)
#else
void collectFactor(uint        b,
                   uint        n,
                   int         sign,
                   ulong       p,
   volatile device atomic_int *factorCount,
            device long4      *factors)
#endif
{      
#if defined(USE_OPENCL)
   int old = atomic_inc(factorCount);
#else
   int old = atomic_fetch_add_explicit(factorCount, 1, memory_order_relaxed);
#endif
   // If we reach the end, stop adding to the buffer.  The CPU code will end
   // with an error as the buffer is not large enough to capture all factors.
   if (old >= D_MAX_FACTORS)
      return;
   
   factors[old].x = b;
   factors[old].y = n;
   if (sign > 2)
      factors[old].z = sign;
   else
      factors[old].z = (sign > 0 ? +1 : +2);
   factors[old].w = p;
}