/* cisonemultiple_kernel.cl -- (C) Mark Rodenkirch, July 2023

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.
 */

#if !defined(USE_OPENCL) && !defined(USE_METAL)
#define MEED_METALLIB
#endif


#ifdef USE_METAL
#include <metal_stdlib>
#include <metal_atomic>
using namespace metal;
#endif

// If we have to generate a metallib (which is only done to verify that the code below
// compiles, then add these #defines.  If not generating a metallib, then the
// code that includes this file will prepend the #defines that the kernel uses.
#ifdef MEED_METALLIB
#define MAX_FACTORS           500
#define BASE                    2
#define BEST_Q                  5
#define SIEVE_LOW               5
#define MAX_SEQUENCES         100
#define MAX_SUBSEQUENCES      100
#define HASH_ELEMENTS         500
#define HASH_SIZE             500
#define POWER_RESIDUE_LCM     720
#define DIM2                  120
#define DIM3                  120
#endif


#if defined(USE_OPENCL)
#pragma OPENCL EXTENSION cl_khr_int64_extended_atomics: enable
#define MUL_HI          mul_hi

void collectFactor(ulong   p,
                   uint    ssIdx,
                   uint    n,
 volatile __global uint   *factorCount,
          __global ulong4 *factors);
#else
#define MUL_HI          mulhi

void collectFactor(ulong       p,
                   uint        ssIdx,
                   uint        n,
   volatile device atomic_int *factorCount,
            device ulong4     *factors);
#endif
 

#define SP_MIXED     0
#define SP_EVEN      1
#define SP_ODD       2
#define SP_NO_PARITY 999

#define MM_P(p)             (p.x)
#define MM_Q(p)             (p.y)
#define MM_ONE(p)           (p.z)
#define MM_R2(p)            (p.w)

#define SEQ_PARITY(a,b)     (a[b].x)
#define SEQ_MINSS(a,b)      (a[b].y)
#define SEQ_MAXSS(a,b)      (a[b].z)
#define SEQ_C(a,b)          (a[b].w)
                            
#define SUBSEQ_Q(a,b)       (a[b].x)
#define SUBSEQ_BS(a,b)      (a[b].y)
#define SUBSEQ_GS(a,b)      (a[b].z)

#define USABLE_SEQIDX(a,b)  (a[b].x)
#define USABLE_SSIDX(a,b)   (a[b].y)
#define USABLE_Q(a,b)       (a[b].z)
#define USABLE_BDCK(a,b)    (a[b].w)

#define N_TERM(q, i, j)       ((SIEVE_LOW + (j) + (i)*babySteps)*BEST_Q + q)

// This allows us to create a one dimensional array to access the qList and ladders
//    a = parity
//    b = power residue index
//    c = power residue for congruent q
#define CSS_INDEX(a, b, c) ((a) * DIM2 + (b) * DIM3 + (c))

#define L_BYTE(x)  ((x)>>3)
#define L_BIT(x)   (1<<((x)&7))

#define HASH_NOT_FOUND        UINT_MAX
#define HASH_MASK1            (1<<15)
#define HASH_MASK2            (HASH_MASK1-1)

ulong  invmod(ulong a, ulong p);
short  legendre(long a, ulong p);
ulong  getNegCK(ulong k, int c, ulong p);

uint      setupDiscreteLog(__global const ulong   *ks,
                           __global const long    *kcCores,
                           __global const uint4   *seqData,
                           __global const uint4   *subseqData,
                           __global const short   *divisorShifts,
                           __global const uint    *prlIndices,
                           __global const uint    *cssIndices,
                           __global const uint    *cssSubseqs,
                                          ulong   *resBD,
                                          ulong4   mmPrime,
                                          ulong    resInvBase,
                                          ulong   *resX,
                                          ulong4  *usableSubsequence);

uint      getShift0Subsequences(__global const ulong   *ks,
                                __global const long    *kcCores,
                                __global const uint4   *seqData,
                                __global const uint4   *subseqData,
                                               ulong   *resBD,
                                               ulong4   mmPrime,
                                               ulong4  *usableSubsequence);

uint  getShiftXSubsequences(__global const ulong   *ks,
                            __global const long    *kcCores,
                            __global const uint4   *seqData,
                            __global const uint4   *subseqData,
                            __global const uint    *prlIndices,
                            __global const uint    *cssIndices,
                            __global const uint    *cssSubseqs,
                                           ulong   *resBD,
                                           ulong4   mmPrime,
                                           ulong    pShift,
                                           uint     r,
                                           ulong   *resX,
                                           ulong4  *usableSubsequence);

ulong climbLadder(__global const ushort  *ladders,
                                 ulong4   mmPrime,
                                 ulong    resBase,
                                 ulong   *resBD);

ulong doBabySteps(ulong4 mmPrime,
                  ulong resInvBase,
                  uint bSteps,
                  ushort *h_table,
                  ushort *h_olist,
                  ulong *h_BJ64);
                
void  hashInsert(ulong bj, uint j, ushort *h_table, ushort *h_olist, ulong *h_BJ64);
uint  hashLookup(ulong bj, ushort *h_table, ushort *h_olist, ulong *h_BJ64);

ulong mmmInvert(ulong p);
ulong mmmOne(ulong _p);
ulong mmmR2(ulong4 p);
ulong mmmAdd(ulong a, ulong b, ulong _p);
ulong mmmSub(ulong a, ulong b, ulong _p);
ulong mmmMulmod(ulong a, ulong b, ulong4 p);
ulong mmmNToRes(ulong n, ulong4 p);
ulong mmmPowmod(ulong resbase, ulong exp, ulong4 p);

#if defined(USE_OPENCL)
__kernel void cisonemultiple_kernel(__global const ulong   *primes,
                                    __global const ulong   *ks,
                                    __global const long    *kcCores,
                                    __global const uint4   *seqData,
                                    __global const uint4   *subseqData,
                                    __global const short   *divisorShifts,
                                    __global const uint    *prlIndices,
                                    __global const uint    *cssIndices,
                                    __global const uint    *cssSubseqs,
                                    __global const ushort  *ladders,
                           volatile __global       uint    *factorCount,
                                    __global       ulong4  *factors)
#else
kernel void cisonemultiple_kernel(device const ulong   *primes,
                                  device const ulong   *ks,
                                  device const long    *kcCores,
                                  device const uint4   *seqData,
                                  device const uint4   *subseqData,
                                  device const short   *divisorShifts,
                                  device const uint    *prlIndices,
                                  device const uint    *cssIndices,
                                  device const uint    *cssSubseqs,
                                  device const ushort  *ladders,
                         volatile device atomic_int   *factorCount,
                                  device       ulong4 *factors)
                                               uint    tpid [[thread_position_in_grid]])
#endif
{
#if defined(USE_OPENCL)
   int    gid = get_global_id(0);
#else
   int    gid = tpid;
#endif

   ulong4 mmPrime;
   ulong  thePrime;
   
   MM_P(mmPrime)   = thePrime = primes[gid];
   MM_Q(mmPrime)   = mmmInvert(thePrime);
   MM_ONE(mmPrime) = mmmOne(thePrime);
   MM_R2(mmPrime)  = mmmR2(mmPrime);
   
   // compute 1/base (mod p)
   ulong   invBase = invmod(BASE, thePrime);

   ulong   resBase = mmmNToRes(BASE, mmPrime);
   ulong   resInvBase = mmmNToRes(invBase, mmPrime);

   ushort  h_table[HASH_SIZE];
   ushort  h_olist[HASH_ELEMENTS];
   ulong   h_BJ64[HASH_ELEMENTS+1];

   ulong4  usableSubsequences[MAX_SUBSEQUENCES];
   ulong   resBDCK[MAX_SUBSEQUENCES];
   ulong   resBD[BEST_Q];
   ulong   resX[POWER_RESIDUE_LCM];

   ulong   resBexpQ;
   ulong   k, ssCount;
   uint    babySteps, giantSteps;
   uint    i, j;

   // -ckb^d is an r-th power residue for at least one term (k*b^d)*(b^Q)^(n/Q)+c of this subsequence
   resBexpQ = climbLadder(ladders, mmPrime, resBase, resBD);

   ssCount = setupDiscreteLog(ks, kcCores, seqData, subseqData, divisorShifts, prlIndices, cssIndices, cssSubseqs, resBD, mmPrime, resInvBase, resX, usableSubsequences);

   // If no subsequences for this p, then no factors, so return
   if (ssCount == 0)
      return;
      
   babySteps  = SUBSEQ_BS(subseqData, ssCount-1);
   giantSteps = SUBSEQ_GS(subseqData, ssCount-1);

   ushort orderOfB = doBabySteps(mmPrime, resInvBase, babySteps, h_table, h_olist, h_BJ64);
     
   if (orderOfB > 0)
   {
      // If orderOfB > 0, then this is all the information we need to
      // determine every solution for this p, so no giant steps are neede
      for (k=0; k<ssCount; k++)
      {
         j = hashLookup(USABLE_BDCK(usableSubsequences, k), h_table, h_olist, h_BJ64);

         while (j < babySteps * giantSteps)
         {
            uint q = USABLE_Q(usableSubsequences, k);
             
            collectFactor(thePrime, USABLE_SSIDX(usableSubsequences, k), N_TERM(q, 0, j), factorCount, factors);
             
            j += orderOfB;
         }
      }
   }
   else
   {
      // First giant step
      for (k=0; k<ssCount; k++)
      {
         j = hashLookup(USABLE_BDCK(usableSubsequences, k), h_table, h_olist, h_BJ64);

         if (j != HASH_NOT_FOUND)
         {
            uint q = USABLE_Q(usableSubsequences, k);
            
            collectFactor(thePrime, USABLE_SSIDX(usableSubsequences, k), N_TERM(q, 0, j), factorCount, factors);
         }
      }

      // Remaining giant steps
      if (giantSteps > 1)
      {
         ulong resBQM = mmmPowmod(resBexpQ, babySteps, mmPrime);
         
  
         for (i=1; i<giantSteps; i++)
         {
            for (k=0; k<ssCount; k++)
            {         
               USABLE_BDCK(usableSubsequences, k) = mmmMulmod(USABLE_BDCK(usableSubsequences, k), resBQM, mmPrime);
               
               j = hashLookup(USABLE_BDCK(usableSubsequences, k), h_table, h_olist, h_BJ64);

               if (j != HASH_NOT_FOUND)
               {
                  uint q = USABLE_Q(usableSubsequences, k);
                  
                  collectFactor(thePrime, USABLE_SSIDX(usableSubsequences, k), N_TERM(q, i, j), factorCount, factors);
               }
            }
         }
      }
   }
}

// Assign BJ64[i] = b^i (mod p) for each i in the ladder.
// Return b^Q (mod p).
ulong climbLadder(__global const ushort  *ladders,
                                 ulong4   mmPrime,
                                 ulong    resBase,
                                 ulong   *resBD)
{
   uint  i, j, idx, lLen;

   lLen = *ladders;
   
   // Precompute b^d (mod p) for 0 <= d <= Q, as necessary
   resBD[0] = MM_ONE(mmPrime);
   resBD[1] = resBase;
   resBD[2] = mmmMulmod(resBD[1], resBD[1], mmPrime);
   
   i = 2;
   for (j=0; j<lLen; j++)
   {
      idx = ladders[j+1];

      resBD[i+idx] = mmmMulmod(resBD[i], resBD[idx], mmPrime);
      
      i += idx;
   }

   return resBD[BEST_Q];
}

// This function builds the list ii_CSSList[] of subsequences (k*b^d)*(b^Q)^m+c for
// which p may be a factor (-ckb^d is a quadratic/cubic/quartic/quintic
// residue with respect to p) and initialises the table D64[] with the
// values -c/(k*b^d) (mod p). As a side effect, bQ is set to the value b^Q
// (mod p) for use later in bsgs64(). Returns the number of subsequences listed in ii_CSS[].
uint      setupDiscreteLog(__global const ulong   *ks,
                           __global const long    *kcCores,
                           __global const uint4   *seqData,
                           __global const uint4   *subseqData,
                           __global const short   *divisorShifts,
                           __global const uint    *prlIndices,
                           __global const uint    *cssIndices,
                           __global const uint    *cssSubseqs,
                                          ulong   *resBD,
                                          ulong4   mmPrime,
                                          ulong    resInvBase,
                                          ulong   *resX,
                                          ulong4  *usableSubsequence)
{
   ulong      bm, pShift;
   uint       idx, r;
   int        shift;
   
   bm = MM_P(mmPrime) / 2;

   idx = bm % (POWER_RESIDUE_LCM/2);
   shift = divisorShifts[idx];
   
   if (shift == 0)
      return getShift0Subsequences(ks, kcCores, seqData, subseqData, resBD, mmPrime, usableSubsequence);
   
   if (shift > 0)
   {
      // p = 1 (mod s), where s is not a power of 2. Check for r-th power
      // residues for each prime power divisor r of s.
      pShift = MM_P(mmPrime) / shift;
   }
   else
   {
      // p = 1 (mod 2^s), where s > 1. Check for r-th power residues for each divisor
      // r of s. We handle this case seperately to avoid computing p/s using plain division.
      pShift = MM_P(mmPrime) >> (-shift);
      shift = 1 << (-shift);
   }

   /* For 0 <= r < s, resX[r] <- 1/(b^r)^((p-1)/s) */
   resX[0] = MM_ONE(mmPrime);
   resX[1] = mmmPowmod(resInvBase, pShift, mmPrime);
  
   for (r=1; resX[r] != resX[0]; r++)
      resX[r+1] = mmmMulmod(resX[r], resX[1], mmPrime);

   if (shift % r != 0)
      return 0;
    
   // 1/(b^r)^((p-1)/s)=1 (mod p) therefore (1/(b^r)^((p-1)/s))^y=1 (mod p)
   // for 0 <= y < s/r. (Could we do more with this?)
   
   return getShiftXSubsequences(ks, kcCores, seqData, subseqData, prlIndices, cssIndices, cssSubseqs, resBD, mmPrime, pShift, r, resX, usableSubsequence);
}

uint      getShift0Subsequences(__global const ulong   *ks,
                                __global const long    *kcCores,
                                __global const uint4   *seqData,
                                __global const uint4   *subseqData,
                                               ulong   *resBD,
                                               ulong4   mmPrime,
                                               ulong4  *usableSubsequence)
{
   short      kcLegendre;
   short      bLegendre = 0;
   short      usable = 0;
   uint       j = 0;
   uint       seqIdx = subseqData[0].w * MAX_SEQUENCES;
   
   bLegendre = legendre(BASE, MM_P(mmPrime));

   for ( ; ks[seqIdx] > 0; seqIdx++)
   {
      kcLegendre = legendre(kcCores[seqIdx], MM_P(mmPrime));
      
      switch (SEQ_PARITY(seqData, seqIdx))
      {
         case SP_EVEN:
            usable = (kcLegendre == 1 ? 1 : 0);
            break;
         
         case SP_ODD:
            usable = (kcLegendre == bLegendre ? 1 : 0);
            break;
         
         case SP_MIXED:
            usable = ((kcLegendre == 1 || kcLegendre == bLegendre) ? 1 : 0);
            break;
      }
      
      if (usable == 1)
      {
         ulong negCK = getNegCK(ks[seqIdx], (SEQ_C(seqData, seqIdx) == 1 ? 1 : -1), MM_P(mmPrime));
         ulong resNegCK = mmmNToRes(negCK, mmPrime);

         uint minss = SEQ_MINSS(seqData, seqIdx);
         uint maxss = SEQ_MINSS(seqData, seqIdx);
   
         for (uint ssIdx=minss; ssIdx<=maxss; ssIdx++)
         {
            uint q = SUBSEQ_Q(subseqData, ssIdx);
                  
            USABLE_SEQIDX(usableSubsequence, j) = seqIdx;
            USABLE_SSIDX(usableSubsequence, j) = ssIdx;
            USABLE_Q(usableSubsequence, j) = q;
            USABLE_BDCK(usableSubsequence, j) = mmmMulmod(resBD[q], resNegCK, mmPrime);
                              
            j++;
         }
      }
   }

   return j;
}

uint  getShiftXSubsequences(__global const ulong   *ks,
                            __global const long    *kcCores,
                            __global const uint4   *seqData,
                            __global const uint4   *subseqData,
                            __global const uint    *prlIndices,
                            __global const uint    *cssIndices,
                            __global const uint    *cssSubseqs,
                                           ulong   *resBD,
                                           ulong4   mmPrime,
                                           ulong    pShift,
                                           uint     r,
                                           ulong   *resX,
                                           ulong4  *usableSubsequence)
{
   short      kcLegendre;
   short      bLegendre = 0;
   short      usable = 0;
   uint       qr_mod, rIdx;
   uint       h, j = 0;
   uint       ssIdx, cssIdx;
   uint       seqIdx = subseqData[0].w * MAX_SEQUENCES;
   
   rIdx = prlIndices[r];
   
   bLegendre = legendre(BASE, MM_P(mmPrime));

   for ( ; ks[seqIdx] > 0; seqIdx++)
   {
      kcLegendre = legendre(kcCores[seqIdx], MM_P(mmPrime));
      
      switch (SEQ_PARITY(seqData, seqIdx))
      {
         case SP_EVEN:
            usable = (kcLegendre == 1 ? 1 : 0);
            break;
         
         case SP_ODD:
            usable = (kcLegendre == bLegendre ? 1 : 0);
            break;
         
         case SP_MIXED:
            usable = ((kcLegendre == 1 || kcLegendre == bLegendre) ? 1 : 0);
            break;
      }

      if (usable == 1)
      {
         ulong negCK = getNegCK(ks[seqIdx], (SEQ_C(seqData, seqIdx) == 1 ? 1 : -1), MM_P(mmPrime));
         ulong resNegCK = mmmNToRes(negCK, mmPrime);
         ulong resPowNegCK = mmmPowmod(resNegCK, pShift, mmPrime);
           
         resX[r] = resPowNegCK;
         
         // Find h such that resX[h] = resX[r], i.e. (-ckb^h)^((p-1)/r)=1 (mod p), or h=r if not found
         for (h=0; resX[r] != resX[h]; h++)
            ;
    
         if (h < r)
         {
            qr_mod = cssIdx = CSS_INDEX(seqIdx, rIdx, h);

            // -c/(k*b^n) is an r-power residue for at least one term k*b^n+c of this sequence.
            cssIdx = cssIndices[cssIdx];
    
            if (cssIdx > 0 && cssIndices[cssIdx] > 0)
            {
               uint count = cssIndices[cssIdx];
     
               // -ckb^d is an r-th power residue for at least one term (k*b^d)*(b^Q)^(n/Q)+c of this subsequence.
               for (uint idx=0; idx<count; idx++)
               {
                  uint ssIdx = cssSubseqs[cssIdx+idx];
                  uint q = SUBSEQ_Q(subseqData, ssIdx);
                  
                  USABLE_SEQIDX(usableSubsequence, j) = seqIdx;
                  USABLE_SSIDX(usableSubsequence, j) = ssIdx;
                  USABLE_Q(usableSubsequence, j) = q;
                  USABLE_BDCK(usableSubsequence, j) = mmmMulmod(resBD[q], resNegCK, mmPrime);
                                    
                  j++;
               }
            }
         }
      }
   }
   
   return j;
}

ulong doBabySteps(ulong4 mmPrime,
                  ulong  resInvBase,
                  uint    bSteps,
                  ushort *h_table,
                  ushort *h_olist,
                  ulong  *h_BJ64)
{
   ulong    resInvBaseExpQ;
   ulong    resBJ;
   ulong    firstResBJ;
   uint     j;
    
   // b <- inv_b^Q (mod p)
   resInvBaseExpQ = mmmPowmod(resInvBase, BEST_Q, mmPrime);
  
   firstResBJ = resBJ = mmmPowmod(resInvBaseExpQ, SIEVE_LOW, mmPrime);

   for (j=0; j<bSteps; j++)
   { 
      hashInsert(resBJ, j, h_table, h_olist, h_BJ64);
      
      resBJ = mmmMulmod(resBJ, resInvBaseExpQ, mmPrime);
            
      if (resBJ == firstResBJ)
         return j + 1;
   }
   
   return 0;
}

ulong mmmInvert(ulong p)
{
   ulong p_inv = 1;
   ulong prev = 0;
   
   while (p_inv != prev)
   {
      prev = p_inv;
      p_inv *= (2 - p * p_inv);
   }
   
   return p_inv;
}

// Compute the residual of 1 (mod p)
inline ulong mmmOne(ulong _p)
{
   return ((-_p) % _p);
}

// Compute the residual of 2^64 (mod p)
inline ulong mmmR2(ulong4 mmPrime)
{
	ulong t = mmmAdd(MM_ONE(mmPrime), MM_ONE(mmPrime), MM_P(mmPrime));
   
   t = mmmAdd(t, t, MM_P(mmPrime));   // 4
   
	for (size_t i=0; i<5; i++)
      t = mmmMulmod(t, t, mmPrime);   // 4^{2^5} = 2^64
      
	return t;
}

inline ulong mmmAdd(ulong a, ulong b, ulong _p)
{
   ulong c = (a >= _p - b) ? _p : 0;
   return a + b - c;
}

inline ulong mmmSub(ulong a, ulong b, ulong _p)
{
   ulong c = (a < b) ? _p : 0;
   return a - b + c;
}

// Compute the residual of n (mod p)
inline ulong mmmNToRes(ulong n, ulong4 mmPrime)
{
   return mmmMulmod(n, MM_R2(mmPrime), mmPrime);
}

ulong mmmMulmod(ulong a, ulong b, ulong4 mmPrime)
{
   ulong lo = a * b;
   ulong hi = MUL_HI(a, b);
   
   ulong m = lo * MM_Q(mmPrime);
   
   ulong hi2 = MUL_HI(m, MM_P(mmPrime));
   long r = (long) hi - (long) hi2;

   if (r < 0)
      return (ulong) (r + MM_P(mmPrime));
      
   return (ulong) r;
}

// Compute the residual of b ^ n (mod p)
ulong   mmmPowmod(ulong resbase, ulong exp, ulong4 mmPrime)
{
   ulong x = resbase;
   ulong y = MM_ONE(mmPrime);
   
   while (true)
   {
      if (exp & 1)
         y = mmmMulmod(x, y, mmPrime);

      exp >>= 1;

      if (!exp)
         return y;

      x = mmmMulmod(x, x, mmPrime);
   }

   // Should never get here
   return 0;
}

ulong  invmod(ulong a, ulong p)
{
   ulong ps1, ps2, q, r, t, dividend, divisor;
   uint parity;

   if (a < 3)
      return (a < 2) ? a : (p+1)/2;

   q = p / a;
   r = p % a;

   dividend = a;
   divisor = r;
   ps1 = q;
   ps2 = 1;
   parity = 0;

   while (divisor > 1)
   {
      r = dividend - divisor;
      t = r - divisor;
      if (r >= divisor) {
         q += ps1; r = t; t -= divisor;
         if (r >= divisor) {
            q += ps1; r = t; t -= divisor;
            if (r >= divisor) {
               q += ps1; r = t; t -= divisor;
               if (r >= divisor) {
                  q += ps1; r = t; t -= divisor;
                  if (r >= divisor) {
                     q += ps1; r = t; t -= divisor;
                     if (r >= divisor) {
                        q += ps1; r = t; t -= divisor;
                        if (r >= divisor) {
                           q += ps1; r = t; t -= divisor;
                           if (r >= divisor) {
                              q += ps1; r = t;
                              if (r >= divisor) {
                                 q = dividend / divisor;
                                 r = dividend % divisor;
                                 q *= ps1;
                              } } } } } } } } }
      q += ps2;
      parity = ~parity;
      dividend = divisor;
      divisor = r;
      ps2 = ps1;
      ps1 = q;
   }

   return (parity) ? ps1 : p - ps1;
}

short  legendre(long a, ulong p)
{
   ulong x, y, t;
   short sign;

   if (a < 0)
   {
      a = -a;
      sign = (p % 4 == 1) ? 1 : -1;
   }
   else
      sign = 1;

   for (y = a; y % 2 == 0; y /= 2)
      if (p % 8 == 3 || p % 8 == 5)
         sign = -sign;

   if (p % 4 == 3 && y % 4 == 3)
      sign = -sign;

   for (x = p % y; x > 0; x %= y)
   {
      for ( ; x % 2 == 0; x /= 2)
         if (y % 8 == 3 || y % 8 == 5)
            sign = -sign;

      t = x, x = y, y = t;

      if (x % 4 == 3 && y % 4 == 3)
         sign = -sign;
   }

   return sign;
}

ulong getNegCK(ulong k, int c, ulong p)
{
   ulong negCK;
   
   if (p < k)
      negCK = k % p;
   else 
      negCK = k;
  
   if (c > 0)
      negCK = p - negCK;
   
   return negCK;
}
   
void hashInsert(ulong bj, uint j, ushort *h_table, ushort *h_olist, ulong *h_BJ64)
{
   uint slot;

   h_BJ64[j] = bj;
   slot = bj & (HASH_SIZE - 1);
   if (h_table[slot] == HASH_ELEMENTS)
      h_table[slot] = j;
   else
   {
      h_olist[j] = (h_table[slot] ^ HASH_MASK1);
      h_table[slot] = (j | HASH_MASK1);
   }
}

uint hashLookup(ulong bj, ushort *h_table, ushort *h_olist, ulong *h_BJ64)
{
   uint   slot;
   ushort elt;

   slot = bj & (HASH_SIZE - 1);
   elt = h_table[slot];

   if (h_BJ64[elt & HASH_MASK2] == bj)
      return elt & HASH_MASK2;
   
   if ((elt & HASH_MASK1) == 0)
      return HASH_NOT_FOUND;

   elt &= HASH_MASK2;
   do
   {
      if (h_BJ64[h_olist[elt] & HASH_MASK2] == bj)
         return h_olist[elt] & HASH_MASK2;
      
      elt = h_olist[elt];
   } while ((elt & HASH_MASK1) == 0);

   return HASH_NOT_FOUND;
}

#if defined(USE_OPENCL)
void collectFactor(ulong   p,
                   uint    ssIdx,
                   uint    n,
 volatile __global uint   *factorCount,
          __global ulong4 *factors)
#else
void collectFactor(ulong       p,
                   uint        ssIdx,
                   uint        n,
   volatile device atomic_int *factorCount,
            device ulong4     *factors)
#endif
{
#if defined(USE_OPENCL)
   int old = atomic_inc(factorCount);
#else
   int old = atomic_fetch_add_explicit(factorCount, 1, memory_order_relaxed);
#endif

   // If we reach the end, stop adding to the buffer.  The CPU code will end
   // with an error as the buffer is not large enough to capture all factors.
   if (old >= MAX_FACTORS)
      return;
   
   factors[old].x = ssIdx;
   factors[old].y = n;
   factors[old].z = p;
}