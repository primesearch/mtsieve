/* mf_kernel.metal -- (C) Mark Rodenkirch, April 2022

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.
   
   Thanks to Yves Gallot for this implementation based upon 
   Peter L. Montgomery, Modular multiplication without trial division, Math. Comp.44 (1985), 519â€“521.
 */

#if !defined(USE_OPENCL) && !defined(USE_METAL)
#define MEED_METALLIB
#endif


#ifdef USE_METAL
#include <metal_stdlib>
#include <metal_atomic>
using namespace metal;
#endif

// If we have to generate a metallib (which is only done to verify that the code below
// compiles, then add these #defines.  If not generating a metallib, then the
// code that includes this file will prepend the #defines that the kernel uses.
#ifdef MEED_METALLIB
#define D_MIN_N            1000
#define D_MAX_N            5000
#define D_MAX_STEPS        1000
#define D_MULTIFACTORIAL      1
#define D_MAX_FACTORS      1000
#endif

#if defined(USE_OPENCL)
#pragma OPENCL EXTENSION cl_khr_int64_extended_atomics: enable
#define MUL_HI          mul_hi

ulong computeFirstTerm(__global const  ulong  *bases,
                       __global const  uint   *powers,
                                       uint    tIdx,
                                       ulong   thePrime,
                                       ulong   _q,
                                       ulong   _r2);

void collectFactor(uint  n,
                   int   c,
                   ulong p,
 volatile __global uint  *factorCount,
          __global long4 *factors);

#else
#define MUL_HI          mulhi

ulong computeFirstTerm(device const  ulong  *bases,
                       device const  uint   *powers,
                                     uint    tIdx,
                                     ulong   thePrime,
                                     ulong   _q,
                                     ulong   _r2);

void collectFactor(int         n,
                   int         c,
                   ulong       p,
   volatile device atomic_int *factorCount,
            device long4      *factors);
#endif

ulong mmmInvert(ulong _p);
ulong mmmOne(ulong _p);
ulong mmmR2(ulong _p, ulong _q, ulong _one);
ulong mmmAdd(ulong a, ulong b, ulong _p);
ulong mmmSub(ulong a, ulong b, ulong _p);
ulong mmmMulmod(ulong a, ulong b, ulong _p, ulong _q);
ulong mmmNToRes(ulong n, ulong _p, ulong _q, ulong _r2);
ulong mmmPowmod(ulong resbase, ulong exp, ulong _p, ulong _q, ulong _one);

#if defined(USE_OPENCL)
__kernel void mf_kernel(__global const  ulong  *primes,
                        __global        ulong  *rems,
                        __global const  ulong  *bases,
                        __global const  uint   *powers,
                        __global        uint   *params,
               volatile __global        uint   *factorCount,
                        __global        long4  *factors)
#else
kernel void mf_kernel(device const  ulong  *primes,
                      device        ulong  *rems,
                      device const  ulong  *bases,
                      device const  uint   *powers,
                      device        uint   *params,
             volatile device atomic_int    *factorCount,
                      device        long4  *factors,
                                    uint    tpid [[thread_position_in_grid]])
#endif
{
#if defined(USE_OPENCL)
   int    gid = get_global_id(0);
#else
   int    gid = tpid;
#endif

   int    steps;
   int    idx = 0;
   int    maxNFirstLoop = D_MIN_N - D_MULTIFACTORIAL;
   
   ulong  n = params[0];
   ulong  thePrime = primes[gid];

   if (thePrime == 0) return;

   ulong _q = mmmInvert(thePrime);
   ulong pOne = mmmOne(thePrime);
   ulong mOne = mmmSub(0, pOne, thePrime);
   ulong _r2 = mmmR2(thePrime, _q, pOne);

   ulong resAdd, resN, resRem;
   
   if (n == 0)
   {
      if (D_MULTIFACTORIAL == 1)
      {
         resRem = computeFirstTerm(bases, powers, 0, thePrime, _q, _r2);
         
         n = D_MIN_N - 1;
      }
      else
      {
         uint mf = params[1];
         
         resRem = computeFirstTerm(bases, powers, mf * D_BASES, thePrime, _q, _r2);

         n = D_MIN_N - 1;
         
         while (n % D_MULTIFACTORIAL != mf)
            n--;

      }
   }
   else
   {
      // Set resRem = residual of lastN!mf (mod p)
      resRem = rems[gid];
   }

   steps = 0;
   
   resAdd = mmmNToRes(D_MULTIFACTORIAL, thePrime, _q, _r2);
   resN = mmmNToRes(n, thePrime, _q, _r2);
   
   // At this point resRem = (n-1)! and resN = (n-1)
   // where n is the largest n less than D_MIN_N (when params[0] = 0).
   while (n < D_MAX_N)
   {      
      if (steps >= D_MAX_STEPS)
         break;

      steps++;
      n += D_MULTIFACTORIAL;
      resN = mmmAdd(resN, resAdd, thePrime);
      resRem = mmmMulmod(resRem, resN, thePrime, _q);

      if (resRem == pOne)
         collectFactor(n, -1, thePrime, factorCount, factors);
         
      if (resRem == mOne)
         collectFactor(n, +1, thePrime, factorCount, factors);
   }

   // We will recalculate resN on the next call so that.
   params[0] = n;
   rems[gid] = resRem;
}

#if defined(USE_OPENCL)
ulong computeFirstTerm(__global const  ulong  *bases,
                       __global const  uint   *powers,
                                       uint    tIdx,
                                       ulong   thePrime,
                                       ulong   _q,
                                       ulong   _r2)
#else
ulong computeFirstTerm(device const  ulong  *bases,
                       device const  uint   *powers,
                                     uint    tIdx,
                                     ulong   thePrime,
                                     ulong   _q,
                                     ulong   _r2)
#endif
{
   ulong pOne = mmmOne(thePrime);
   ulong resBase;
   ulong resTemp;
   ulong resRem = pOne;
      
   uint  power = 0;
   
   while (powers[tIdx] > 0)
   {
      resBase = mmmNToRes(bases[tIdx], thePrime, _q, _r2);
         
      // If this base has the same power as the previous base, just muliply
      // We will do exponentiation before we multiply by resRem
      if (powers[tIdx] == power)
      {
         resTemp = mmmMulmod(resTemp, resBase, thePrime, _q);
         tIdx++;
         continue;
      }

      if (power != 0)
      {
         // resRem = resTemp^power * resRem
         resTemp = mmmPowmod(resTemp, power, thePrime, _q, pOne);
         resRem = mmmMulmod(resRem, resTemp, thePrime, _q);
      }
      
      power = powers[tIdx];
      resTemp = resBase;
      tIdx++;
   }

   if (power != 0)
   {
      if (power > 1)
         resTemp = mmmPowmod(resTemp, power, thePrime, _q, pOne);

      resRem = mmmMulmod(resRem, resTemp, thePrime, _q);
   }
   
   return resRem;
}

ulong mmmInvert(ulong _p)
{
   ulong p_inv = 1;
   ulong prev = 0;
   
   while (p_inv != prev)
   {
      prev = p_inv;
      p_inv *= (2 - _p * p_inv);
   }
   
   return p_inv;
}

// Compute the residual of 1 (mod p)
ulong mmmOne(ulong _p)
{
   return ((-_p) % _p);
}

// Compute the residual of 2^64 (mod p)
ulong mmmR2(ulong _p, ulong _q, ulong _one)
{
	ulong t = mmmAdd(_one, _one, _p);
   
   t = mmmAdd(t, t, _p);   // 4
	for (size_t i=0; i<5; i++)
      t = mmmMulmod(t, t, _p, _q);   // 4^{2^5} = 2^64
      
	return t;
}

ulong mmmAdd(ulong a, ulong b, ulong _p)
{
   ulong c = (a >= _p - b) ? _p : 0;
   return a + b - c;
}

ulong mmmSub(ulong a, ulong b, ulong _p)
{
   ulong c = (a < b) ? _p : 0;
   return a - b + c;
}

// Compute the residual of n (mod p)
ulong mmmNToRes(ulong n, ulong _p, ulong _q, ulong _r2)
{
   return mmmMulmod(n, _r2, _p, _q);
}

ulong mmmMulmod(ulong a, ulong b, ulong _p, ulong _q)
{
   ulong lo = a * b;
   ulong hi = MUL_HI(a, b);
   
   ulong m = lo * _q;
   
   ulong hi2 = MUL_HI(m, _p);
   long r = (long) hi - (long) hi2;

   if (r < 0)
      return (ulong) (r + _p);
      
   return (ulong) r;
}

// Compute the residual of b ^ n (mod p)
ulong   mmmPowmod(ulong resbase, ulong exp, ulong _p, ulong _q, ulong _one)
{
   ulong x = resbase;
   ulong y = _one;
   
   while (true)
   {
      if (exp & 1)
         y = mmmMulmod(x, y, _p, _q);

      exp >>= 1;

      if (!exp)
         return y;

      x = mmmMulmod(x, x, _p, _q);
   }

   // Should never get here
   return 0;
}

#if defined(USE_OPENCL)
void collectFactor(uint  n,
                   int   c,
                   ulong p,
 volatile __global uint  *factorCount,
          __global long4 *factors)
#else
void collectFactor(int         n,
                   int         c,
                   ulong       p,
   volatile device atomic_int *factorCount,
            device long4      *factors)
#endif

{
   if (n < D_MIN_N)
      return;
      
   if (n > D_MAX_N)
      return;
      
#if defined(USE_OPENCL)
   int old = atomic_inc(factorCount);
#else
   int old = atomic_fetch_add_explicit(factorCount, 1, memory_order_relaxed);
#endif
   // If we reach the end, stop adding to the buffer.  The CPU code will end
   // with an error as the buffer is not large enough to capture all factors.
   if (old >= D_MAX_FACTORS)
      return;
   
   factors[old].x = n;
   factors[old].y = c;
   factors[old].z = p;
}
