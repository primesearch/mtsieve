/* lifchitz_kernel.gpu -- (C) Mark Rodenkirch, April 2024

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.
 */

#if defined(USE_OPENCL)
#pragma OPENCL EXTENSION cl_khr_int64_extended_atomics: enable
#define MUL_HI          mul_hi

void collectFactor(ulong   idx,
                   int     sign,
                   ulong   p,
 volatile __global uint   *factorCount,
          __global ulong4 *factors);
#else
void collectFactor(ulong       idx,
                   int         sign,
                   ulong       p,
   volatile device atomic_int *factorCount,
            device ulong4     *factors);
#endif

ulong mmmInvert(ulong _p);
ulong mmmOne(ulong _p);
ulong mmmR2(ulong _p, ulong _q, ulong _one);
ulong mmmAdd(ulong a, ulong b, ulong _p);
ulong mmmSub(ulong a, ulong b, ulong _p);
ulong mmmMulmod(ulong a, ulong b, ulong _p, ulong _q);
ulong mmmPowmod(ulong resB, ulong exp, ulong _p, ulong _q, ulong _one, ulong _r2);
ulong mmmNtoRes(ulong n, ulong _p, ulong _q, ulong _r2);
ulong mmmResToN(ulong res, ulong _p, ulong _q);

__kernel void lifchitz_kernel(__global const ulong  *primes,
                              __global const uint   *xBases,
                              __global const uint   *yBases,
                              __global const uint4  *terms,
                     volatile __global       uint   *factorCount,
                              __global       ulong4 *factors)
{
   uint   gid = get_global_id(0);
   ulong  thePrime = primes[gid];

   ulong _q = mmmInvert(thePrime);
   ulong _one = mmmOne(thePrime);
   ulong _r2 = mmmR2(thePrime, _q, _one);
   ulong resBase, res = 0;

   ulong xRemainders[D_MAX_X_BASES];
   ulong yRemainders[D_MAX_Y_BASES];
   
   uint  x, minX = xBases[0];
   uint  y, minY = yBases[0];
   
   resBase = mmmNtoRes(minX, thePrime, _q, _r2);

   for (uint xIdx=0; xIdx<D_MAX_X_BASES; xIdx++)
   {
      if (xBases[xIdx] > 0)
      {
         x = xBases[xIdx];
         res = mmmPowmod(resBase, x, thePrime, _q, _one, _r2);
         xRemainders[x-minX] = mmmResToN(res, thePrime, _q);
      }
         
      resBase = mmmAdd(resBase, _one, thePrime);
   }
   
   resBase = mmmNtoRes(minY, thePrime, _q, _r2);

   for (uint yIdx=0; yIdx<D_MAX_Y_BASES; yIdx++)
   {
      if (yBases[yIdx] > 0)
      {
         y = yBases[yIdx];
         res = mmmPowmod(resBase, y, thePrime, _q, _one, _r2);
         yRemainders[y-minY] = mmmResToN(res, thePrime, _q);
      }
         
      resBase = mmmAdd(resBase, _one, thePrime);
   }
   
   for (uint idx=0; terms[idx].x>0; idx++)
   {
      ulong xPowX = xRemainders[terms[idx].x - minX];
      ulong yPowY = yRemainders[terms[idx].y - minY];
      
      if (terms[idx].z == 1)
      {
         // .z = 1 is for the + form, but we pass 1 back to the caller
         if (xPowX + yPowY == thePrime)
            collectFactor(idx, +1, thePrime, factorCount, factors);
      }
      else 
      {
         // .w = 1 is for the - form, but we pass 2 back to the caller
         if (xPowX == yPowY)
            collectFactor(idx, -1, thePrime, factorCount, factors);
      }
   }
}

ulong mmmInvert(ulong _p)
{
   ulong p_inv = 1;
   ulong prev = 0;

   while (p_inv != prev)
   {
      prev = p_inv;
      p_inv *= (2 - _p * p_inv);
   }

   return p_inv;
}

// Compute the residual of 1 (mod p)
ulong mmmOne(ulong _p)
{
   return ((-_p) % _p);
}

// Compute the residual of 2^64 (mod p)
ulong mmmR2(ulong _p, ulong _q, ulong _one)
{
	ulong t = mmmAdd(_one, _one, _p);
   
   t = mmmAdd(t, t, _p);   // 4
	for (size_t i=0; i<5; i++)
      t = mmmMulmod(t, t, _p, _q);   // 4^{2^5} = 2^64
      
	return t;
}

ulong mmmAdd(ulong a, ulong b, ulong _p)
{
   ulong c = (a >= _p - b) ? _p : 0;
   return a + b - c;
}

ulong mmmSub(ulong a, ulong b, ulong _p)
{
   ulong c = (a < b) ? _p : 0;
   return a - b + c;
}

// Compute the residual of n (mod p)
ulong mmmNtoRes(ulong n, ulong _p, ulong _q, ulong _r2)
{
   return mmmMulmod(n, _r2, _p, _q);
}

// Convert a residual back to n
ulong mmmResToN(ulong res, ulong _p, ulong _q)
{
   return mmmMulmod(res, 1, _p, _q);
}

// Compute the residual of b ^ n (mod p)
ulong mmmPowmod(ulong resB, ulong exp, ulong _p, ulong _q, ulong _one, ulong _r2)
{
   ulong x = resB;
   ulong y = _one;

   while (true)
   {
      if (exp & 1)
         y = mmmMulmod(x, y, _p, _q);

      exp >>= 1;

      if (!exp)
         return y;

      x = mmmMulmod(x, x, _p, _q);
   }

   // Should never get here
   return 0;
}

ulong mmmMulmod(ulong a, ulong b, ulong _p, ulong _q)
{
   ulong lo = a * b;
   ulong hi = MUL_HI(a, b);
   
   ulong m = lo * _q;
   
   ulong hi2 = MUL_HI(m, _p);
   long r = (long) hi - (long) hi2;

   if (r < 0)
      return (ulong) (r + _p);
      
   return (ulong) r;
}

#if defined(USE_OPENCL)
void collectFactor(ulong   idx,
                   int     sign,
                   ulong   p,
 volatile __global uint   *factorCount,
          __global ulong4 *factors)
#else
void collectFactor(ulong       idx,
                   int         sign,
                   ulong       p,
   volatile device atomic_int *factorCount,
            device ulong      *factors)
#endif
{
#if defined(USE_OPENCL)
   int old = atomic_inc(factorCount);
#else
   int old = atomic_fetch_add_explicit(factorCount, 1, memory_order_relaxed);
#endif
   // If we reach the end, stop adding to the buffer.  The CPU code will end
   // with an error as the buffer is not large enough to capture all factors.
   if (old >= D_MAX_FACTORS)
      return;
   
   factors[old].x = idx;
   factors[old].y = (sign == 1 ? 1 : 2);
   factors[old].z = p;
}