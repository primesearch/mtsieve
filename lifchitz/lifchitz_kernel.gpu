/* lifchitz_kernel.gpu -- (C) Mark Rodenkirch, April 2024

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.
 */

#if defined(USE_OPENCL)
#pragma OPENCL EXTENSION cl_khr_int64_extended_atomics: enable
#define MUL_HI          mul_hi

void collectFactor(uint    x,
                   uint    y,
                   ulong     sign,
                   ulong   p,
 volatile __global uint   *factorCount,
          __global ulong4 *factors);
#else
void collectFactor(uint        x,
                   uint        y,
                   int         sign,
                   ulong       p,
   volatile device atomic_int *factorCount,
            device ulong4     *factors);
#endif

#define P_ONE     0x01
#define M_ONE     0x02

// HASH_SIZE is a power of 2
#define HASH_SIZE_M1          (HASH_SIZE-1)

ulong mmmInvert(ulong _p);
ulong mmmOne(ulong _p);
ulong mmmR2(ulong _p, ulong _q, ulong _one);
ulong mmmAdd(ulong a, ulong b, ulong _p);
ulong mmmSub(ulong a, ulong b, ulong _p);
ulong mmmMulmod(ulong a, ulong b, ulong _p, ulong _q);
ulong mmmPowmod(ulong resB, ulong exp, ulong _p, ulong _q, ulong _one, ulong _r2);
ulong mmmNtoRes(ulong n, ulong _p, ulong _q, ulong _r2);
ulong mmmResToN(ulong res, ulong _p, ulong _q);

__kernel void lifchitz_kernel(__global const ulong  *primes,
                     volatile __global       uint   *factorCount,
                              __global       ulong4 *factors)
{
   uint    gid = get_global_id(0);
   ulong   thePrime = primes[gid];

   ulong   _q = mmmInvert(thePrime);
   ulong   _one = mmmOne(thePrime);
   ulong   _r2 = mmmR2(thePrime, _q, _one);
   ulong   resBase, resPow;

   // HASH_SIZE is the smallest power of 2 greater than HASH_ELEMENTS
   uint2   h_table[HASH_SIZE + HASH_ELEMENTS];
   ulong   h_element[HASH_ELEMENTS+1];
   
   uint    y, slot, emptySlot;
   uint    x = D_MIN_X, minX, maxX;
   
   do
   {
      for (slot=0; slot<HASH_SIZE; slot++)
         h_table[slot].x = 0;
        
      for (slot=0; slot<HASH_ELEMENTS; slot++)
         h_element[slot] = 0;  
      
      emptySlot = HASH_SIZE;

      minX = x;
      maxX = x + X_PER_CHUNK;
      
      if (maxX > D_MAX_X)
         maxX = D_MAX_X + 1;
   
      resBase = mmmNtoRes(x, thePrime, _q, _r2);

      for (; x<maxX; x++)
      {
         resPow = mmmPowmod(resBase, x, thePrime, _q, _one, _r2);
         
         h_element[x-minX] = resPow;
         
         // We only want the lowest bits of the residue for choosing the slot so that it fits into h_table.
         slot = resPow & HASH_SIZE_M1;
         
         if (h_table[slot].x == 0)
         {
            h_table[slot].x = x;
            h_table[slot].y = 0;
         }
         else
         {
            // Create a change of x where we insert this x into the chain for this residue           
            h_table[emptySlot].x = h_table[slot].x;
            h_table[emptySlot].y = h_table[slot].y;
            
            h_table[slot].x = x;
            h_table[slot].y = emptySlot;
            
            emptySlot++;
         }
         
         resBase = mmmAdd(resBase, _one, thePrime);
      }
      
      resBase = mmmNtoRes(D_MIN_Y, thePrime, _q, _r2);
      
      for (y=D_MIN_Y; y<=D_MAX_Y; y++)
      {
         resPow = mmmPowmod(resBase, y, thePrime, _q, _one, _r2);

         slot = resPow & HASH_SIZE_M1;
                  
         // We need to meet the following criteria to know we have a match:
         //    h_table[slot].x is not 0
         //    x > y for that entry
         //    h_element[x] = resPow
         while (h_table[slot].x > y)
         {
            x = h_table[slot].x;
            
            if (h_element[x-minX] == resPow)
               collectFactor(x, y, -1, thePrime, factorCount, factors);
            
            slot = h_table[slot].y;
            
            if (slot == 0)
               break;
         }

         resPow = mmmSub(0, resPow, thePrime);

         slot = resPow & HASH_SIZE_M1;
         
         while (h_table[slot].x > y)
         {
            x = h_table[slot].x;
            
            if (h_element[x-minX] == resPow)
               collectFactor(x, y, +1, thePrime, factorCount, factors);
            
            slot = h_table[slot].y;
            
            if (slot == 0)
               break;
         }
            
         resBase = mmmAdd(resBase, _one, thePrime);
      }
   
      x = maxX;
   } while (x <= D_MAX_X);
}

ulong mmmInvert(ulong _p)
{
   ulong p_inv = 1;
   ulong prev = 0;

   while (p_inv != prev)
   {
      prev = p_inv;
      p_inv *= (2 - _p * p_inv);
   }

   return p_inv;
}

// Compute the residual of 1 (mod p)
ulong mmmOne(ulong _p)
{
   return ((-_p) % _p);
}

// Compute the residual of 2^64 (mod p)
ulong mmmR2(ulong _p, ulong _q, ulong _one)
{
	ulong t = mmmAdd(_one, _one, _p);
   
   t = mmmAdd(t, t, _p);   // 4
	for (size_t i=0; i<5; i++)
      t = mmmMulmod(t, t, _p, _q);   // 4^{2^5} = 2^64
      
	return t;
}

ulong mmmAdd(ulong a, ulong b, ulong _p)
{
   ulong c = (a >= _p - b) ? _p : 0;
   return a + b - c;
}

ulong mmmSub(ulong a, ulong b, ulong _p)
{
   ulong c = (a < b) ? _p : 0;
   return a - b + c;
}

// Compute the residual of n (mod p)
ulong mmmNtoRes(ulong n, ulong _p, ulong _q, ulong _r2)
{
   return mmmMulmod(n, _r2, _p, _q);
}

// Convert a residual back to n
ulong mmmResToN(ulong res, ulong _p, ulong _q)
{
   return mmmMulmod(res, 1, _p, _q);
}

// Compute the residual of b ^ n (mod p)
ulong mmmPowmod(ulong resB, ulong exp, ulong _p, ulong _q, ulong _one, ulong _r2)
{
   ulong x = resB;
   ulong y = _one;

   while (true)
   {
      if (exp & 1)
         y = mmmMulmod(x, y, _p, _q);

      exp >>= 1;

      if (!exp)
         return y;

      x = mmmMulmod(x, x, _p, _q);
   }

   // Should never get here
   return 0;
}

ulong mmmMulmod(ulong a, ulong b, ulong _p, ulong _q)
{
   ulong lo = a * b;
   ulong hi = MUL_HI(a, b);
   
   ulong m = lo * _q;
   
   ulong hi2 = MUL_HI(m, _p);
   long r = (long) hi - (long) hi2;

   if (r < 0)
      return (ulong) (r + _p);
      
   return (ulong) r;
}

#if defined(USE_OPENCL)
void collectFactor(uint    x,
                   uint    y,
                   ulong     sign,
                   ulong   p,
 volatile __global uint   *factorCount,
          __global ulong4 *factors)
#else
void collectFactor(uint        x,
                   uint        y,
                   int         sign,
                   ulong       p,
   volatile device atomic_int *factorCount,
            device ulong      *factors)
#endif
{
#if defined(USE_OPENCL)
   int old = atomic_inc(factorCount);
#else
   int old = atomic_fetch_add_explicit(factorCount, 1, memory_order_relaxed);
#endif
   // If we reach the end, stop adding to the buffer.  The CPU code will end
   // with an error as the buffer is not large enough to capture all factors.
   if (old >= D_MAX_FACTORS)
      return;
   
   factors[old].x = x;
   factors[old].y = y;
   factors[old].z = sign;
   factors[old].w = p;
}