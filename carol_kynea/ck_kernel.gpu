/* generic_kernel.cl -- (C) Mark Rodenkirch, May 2018

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.
 */

#if !defined(USE_OPENCL) && !defined(USE_METAL)
#define MEED_METALLIB
#endif


#ifdef USE_METAL
#include <metal_stdlib>
#include <metal_atomic>
using namespace metal;
#endif

// If we have to generate a metallib (which is only done to verify that the code below
// compiles, then add these #defines.  If not generating a metallib, then the
// code that includes this file will prepend the #defines that the kernel uses.
#ifdef MEED_METALLIB
#define BASE                 2
#define SIEVE_LOW           50
#define SIEVE_RANGE         50
#define BABY_STEPS          50
#define GIANT_STEPS         50
#define HASH_ELEMENTS      500
#define HASH_SIZE          500
#define MAX_FACTORS        500
#endif


#if defined(USE_OPENCL)
#pragma OPENCL EXTENSION cl_khr_int64_extended_atomics: enable
#define MUL_HI          mul_hi
   
void collectFactor(ulong   p,
                   ulong   n,
                   int     c,
 volatile __global uint   *factorCount,
          __global long4  *factors);
#else
#define MUL_HI          mulhi
   
void collectFactor(ulong       p,
                   ulong       n,
                   int         c,
   volatile device atomic_int *factorCount,
            device long4      *factors);
#endif

#define HASH_NOT_FOUND        UINT_MAX
#define HASH_MASK1            (1<<15)
#define HASH_MASK2            (HASH_MASK1-1)
#define ROOT_COUNT            4

ulong invmod(ulong a, ulong p); 
uint  isQuadraticResidue(ulong n, ulong p);
ulong findRoot(ulong thePrime, ulong _q, ulong _r2, ulong _one);
 
ulong babySteps(ulong thePrime, ulong _q, ulong _r2, ulong _one, ushort *h_table, ushort *h_olist, ulong *h_BJ64);
void  hashInsert(ulong bj, uint j, ushort *h_table, ushort *h_olist, ulong *h_BJ64);
uint  hashLookup(ulong bj, ushort *h_table, ushort *h_olist, ulong *h_BJ64);
                     
ulong mmmInvert(ulong p);
ulong mmmOne(ulong _p);
ulong mmmR2(ulong _p, ulong _q, ulong _one);
ulong mmmAdd(ulong a, ulong b, ulong _p);
ulong mmmSub(ulong a, ulong b, ulong _p);
ulong mmmMulmod(ulong a, ulong b, ulong _p, ulong _q);
ulong mmmNToRes(ulong n, ulong _p, ulong _q, ulong _r2);
ulong mmmResToN(ulong res, ulong _p, ulong _q);
ulong mmmPowmod(ulong resbase, ulong exp, ulong _p, ulong _q, ulong _one);
   
#if defined(USE_OPENCL)
__kernel void ck_kernel(__global const ulong  *primes,
               volatile __global       uint   *factorCount,
                        __global       long4  *factors)
#else
kernel void ck_kernel(device const ulong  *primes,
             volatile device atomic_int   *factorCount,
                      device       long4  *factors
                                   uint    tpid [[thread_position_in_grid]])
#endif
{
#if defined(USE_OPENCL)
   int    gid = get_global_id(0);
#else
   int    gid = tpid;
#endif
   
   // For our HashTable
   ushort  h_table[HASH_SIZE];
   ushort  h_olist[HASH_ELEMENTS];
   ulong   h_BJ64[HASH_ELEMENTS+1];
   uint    jHash[ROOT_COUNT];
   ulong   resA[ROOT_COUNT];
   uint    j, idx;
   ulong   root1, root2;

   ulong   thePrime = primes[gid];

   if (BASE % thePrime == 0)
      return;
      
   // Skip this prime if there are no values x such that x^2 = 2 (mod p)
   if (isQuadraticResidue(2, thePrime) == 0)
      return;
      
   ulong inv_pb = invmod(BASE, thePrime);
   
   if (inv_pb == 0)
      return;

   for (idx=0; idx<HASH_SIZE; idx++)
      h_table[idx] = HASH_ELEMENTS;  
      
   for (idx=0; idx<HASH_ELEMENTS; idx++)
      h_BJ64[idx] = 0;  
   
   h_BJ64[HASH_ELEMENTS] = ULONG_MAX;   

   
   ulong _q = mmmInvert(thePrime);
   ulong _one = mmmOne(thePrime);
   ulong _r2 = mmmR2(thePrime, _q, _one);
   
   root1 = findRoot(thePrime, _q, _r2, _one);
   
   root2 = mmmSub(mmmNToRes(thePrime, thePrime, _q, _r2), root1, thePrime);
   
   resA[0] = mmmSub(root1, _one, thePrime);
   resA[1] = mmmSub(root2, _one, thePrime);
   resA[2] = mmmAdd(root1, _one, thePrime);
   resA[3] = mmmAdd(root2, _one, thePrime);
         
   uint orderOfB = babySteps(thePrime, _q, _r2, _one, h_table, h_olist, h_BJ64);
  
   jHash[0] = hashLookup(resA[0], h_table, h_olist, h_BJ64);
   jHash[1] = hashLookup(resA[1], h_table, h_olist, h_BJ64);
   jHash[2] = hashLookup(resA[2], h_table, h_olist, h_BJ64);
   jHash[3] = hashLookup(resA[3], h_table, h_olist, h_BJ64);

   if (orderOfB > 0)
   {
      uint j;
      
      for (j = jHash[0]; j < SIEVE_RANGE; j += orderOfB)
         collectFactor(thePrime, SIEVE_LOW+j, +1, factorCount, factors);
      
      for (j = jHash[1]; j < SIEVE_RANGE; j += orderOfB)
         collectFactor(thePrime, SIEVE_LOW+j, +1, factorCount, factors);

      for (j = jHash[2]; j < SIEVE_RANGE; j += orderOfB)
         collectFactor(thePrime, SIEVE_LOW+j, -1, factorCount, factors);
      
      for (j = jHash[3]; j < SIEVE_RANGE; j += orderOfB)
         collectFactor(thePrime, SIEVE_LOW+j, -1, factorCount, factors);
      
      return;
   }
      
   // First giant step
   if (jHash[0] != HASH_NOT_FOUND)
      collectFactor(thePrime, SIEVE_LOW+jHash[0], +1, factorCount, factors);
      
   if (jHash[1] != HASH_NOT_FOUND)
      collectFactor(thePrime, SIEVE_LOW+jHash[1], +1, factorCount, factors);
      
   if (jHash[2] != HASH_NOT_FOUND)
      collectFactor(thePrime, SIEVE_LOW+jHash[2], -1, factorCount, factors);
      
   if (jHash[3] != HASH_NOT_FOUND)
      collectFactor(thePrime, SIEVE_LOW+jHash[3], -1, factorCount, factors);
      
   ulong resB = mmmNToRes(inv_pb, thePrime, _q, _r2);
   
   resB = mmmPowmod(resB, BABY_STEPS, thePrime, _q, _one);
   
   uint   nBase = SIEVE_LOW;

   for (uint step=1; step<GIANT_STEPS; step++)
   {
      resA[0] = mmmMulmod(resA[0], resB, thePrime, _q);
      resA[1] = mmmMulmod(resA[1], resB, thePrime, _q);
      resA[2] = mmmMulmod(resA[2], resB, thePrime, _q);
      resA[3] = mmmMulmod(resA[3], resB, thePrime, _q);
       
      jHash[0] = hashLookup(resA[0], h_table, h_olist, h_BJ64);
      jHash[1] = hashLookup(resA[1], h_table, h_olist, h_BJ64);
      jHash[2] = hashLookup(resA[2], h_table, h_olist, h_BJ64);
      jHash[3] = hashLookup(resA[3], h_table, h_olist, h_BJ64);
      
      nBase += BABY_STEPS;
      
      if (jHash[0] != HASH_NOT_FOUND)
         collectFactor(thePrime, nBase+jHash[0], +1, factorCount, factors);
         
      if (jHash[1] != HASH_NOT_FOUND)
         collectFactor(thePrime, nBase+jHash[1], +1, factorCount, factors);
         
      if (jHash[2] != HASH_NOT_FOUND)
         collectFactor(thePrime, nBase+jHash[2], -1, factorCount, factors);
         
      if (jHash[3] != HASH_NOT_FOUND)
         collectFactor(thePrime, nBase+jHash[3], -1, factorCount, factors);
   }
}

ulong mmmInvert(ulong p)
{
   ulong p_inv = 1;
   ulong prev = 0;
   
   while (p_inv != prev)
   {
      prev = p_inv;
      p_inv *= (2 - p * p_inv);
   }
   
   return p_inv;
}

// Compute the residual of 1 (mod p)
inline ulong mmmOne(ulong _p)
{
   return ((-_p) % _p);
}

// Compute the residual of 2^64 (mod p)
inline ulong mmmR2(ulong _p, ulong _q, ulong _one)
{
	ulong t = mmmAdd(_one, _one, _p);
   
   t = mmmAdd(t, t, _p);   // 4
	for (size_t i=0; i<5; i++)
      t = mmmMulmod(t, t, _p, _q);   // 4^{2^5} = 2^64
      
	return t;
}

inline ulong mmmAdd(ulong a, ulong b, ulong _p)
{
   ulong c = (a >= _p - b) ? _p : 0;
   return a + b - c;
}

inline ulong mmmSub(ulong a, ulong b, ulong _p)
{
   ulong c = (a < b) ? _p : 0;
   return a - b + c;
}

// Compute the residual of n (mod p)
inline ulong mmmNToRes(ulong n, ulong _p, ulong _q, ulong _r2)
{
   return mmmMulmod(n, _r2, _p, _q);
}

ulong mmmMulmod(ulong a, ulong b, ulong _p, ulong _q)
{
   ulong lo = a * b;
   ulong hi = MUL_HI(a, b);
   
   ulong m = lo * _q;
   
   ulong hi2 = MUL_HI(m, _p);
   long r = (long) hi - (long) hi2;

   if (r < 0)
      return (ulong) (r + _p);
      
   return (ulong) r;
}

// Compute the residual of b ^ n (mod p)
ulong   mmmPowmod(ulong resbase, ulong exp, ulong _p, ulong _q, ulong _one)
{
   ulong x = resbase;
   ulong y = _one;
   
   while (true)
   {
      if (exp & 1)
         y = mmmMulmod(x, y, _p, _q);

      exp >>= 1;

      if (!exp)
         return y;

      x = mmmMulmod(x, x, _p, _q);
   }

   // Should never get here
   return 0;
}

ulong mmmResToN(ulong res, ulong _p, ulong _q)
{
   return mmmMulmod(res, 1, _p, _q);
}

uint  isQuadraticResidue(ulong n, ulong _p)
{
   int      j = 1;
	ulong    swap;

	while (n > 1)
	{
		if (n & 1)
		{
			swap = n;
			n = _p;
			_p = swap;
			if (((n & 3) == 3) && ((_p & 3) == 3))
				j = -j;
			n = n % _p;
		}
		else
		{
			n >>= 1;
			if (((_p & 7) == 3) || ((_p & 7) == 5))
				j = -j;
		}
	}

   if (j == 1)
      return 1;
   
   return 0;
}

ulong findRoot(ulong thePrime, ulong _q, ulong _r2, ulong _one)
{
	ulong	   i, s, t, d, m;
   ulong    res, resA, resD;
   ulong    res2 = mmmNToRes(2, thePrime, _q, _r2);
   ulong    resPM1 = mmmNToRes(thePrime-1, thePrime, _q, _r2);

	if ((thePrime & 7) == 7)
		return mmmPowmod(res2, (thePrime+1) >> 2, thePrime, _q, _one);

	t = thePrime - 1;
	s = 0;
	while (!(t & 1))
	{
		s++;
		t >>= 1;
	}

   resA =  mmmPowmod(res2, t, thePrime, _q, _one);

	// Find value d where Lengendre Symbol is -1
	for (d=3; d<thePrime; d++)
		if (!isQuadraticResidue(d, thePrime))
			break;

   resD = mmmNToRes(d, thePrime, _q, _r2);
   resD = mmmPowmod(resD, t, thePrime, _q, _one);

	m = 0;
	for (i=0; i<s; i++)
	{
		if (m == 0)
			res = _one;
		else
			res = mmmPowmod(resD, m, thePrime, _q, _one);

		res = mmmMulmod(res, resA, thePrime, _q);
		res = mmmPowmod(res, 1 << (s - 1 - i), thePrime, _q, _one);
      
		if (res == resPM1)
			m += (1 << i);
	}

	if (m == 0)
		res = _one;
	else
		res = mmmPowmod(resD, m >> 1, thePrime, _q, _one);

   // Don't need resA anymore
	resA = mmmPowmod(res2, (t+1) >> 1, thePrime, _q, _one);
      
	return mmmMulmod(res, resA, thePrime, _q);
}

ulong babySteps(ulong thePrime, ulong _q, ulong _r2, ulong _one, ushort *h_table, ushort *h_olist, ulong *h_BJ64)
{
   uint    j;
   
   ulong   resBJ, resBJ0;
   ulong   resBase = mmmNToRes(BASE, thePrime, _q, _r2);

   resBJ = resBJ0 = mmmPowmod(resBase, N_MIN, thePrime, _q, _one);

   for (j=0; j<BABY_STEPS; j++)
   {
      hashInsert(resBJ, j, h_table, h_olist, h_BJ64);
      
      resBJ = mmmMulmod(resBJ, resBase, thePrime, _q);
      
      if (resBJ == resBJ0)
         return j + 1;
   }
   
   return 0;
}

ulong  invmod(ulong a, ulong p)
{
   ulong ps1, ps2, q, r, t, dividend, divisor;
   uint parity;

   if (a < 3)
      return (a < 2) ? a : (p+1)/2;

   q = p / a;
   r = p % a;

   dividend = a;
   divisor = r;
   ps1 = q;
   ps2 = 1;
   parity = 0;

   while (divisor > 1)
   {
      r = dividend - divisor;
      t = r - divisor;
      if (r >= divisor) {
         q += ps1; r = t; t -= divisor;
         if (r >= divisor) {
            q += ps1; r = t; t -= divisor;
            if (r >= divisor) {
               q += ps1; r = t; t -= divisor;
               if (r >= divisor) {
                  q += ps1; r = t; t -= divisor;
                  if (r >= divisor) {
                     q += ps1; r = t; t -= divisor;
                     if (r >= divisor) {
                        q += ps1; r = t; t -= divisor;
                        if (r >= divisor) {
                           q += ps1; r = t; t -= divisor;
                           if (r >= divisor) {
                              q += ps1; r = t;
                              if (r >= divisor) {
                                 q = dividend / divisor;
                                 r = dividend % divisor;
                                 q *= ps1;
                              } } } } } } } } }
      q += ps2;
      parity = ~parity;
      dividend = divisor;
      divisor = r;
      ps2 = ps1;
      ps1 = q;
   }

   return (parity) ? ps1 : p - ps1;
}

void hashInsert(ulong bj, uint j, ushort *h_table, ushort *h_olist, ulong *h_BJ64)
{
   uint slot;

   h_BJ64[j] = bj;
   slot = bj & (HASH_SIZE - 1);
   if (h_table[slot] == HASH_ELEMENTS)
      h_table[slot] = j;
   else
   {
      h_olist[j] = (h_table[slot] ^ HASH_MASK1);
      h_table[slot] = (j | HASH_MASK1);
   }
}

uint hashLookup(ulong bj, ushort *h_table, ushort *h_olist, ulong *h_BJ64)
{
   uint   slot;
   ushort elt;

   slot = bj & (HASH_SIZE - 1);
   elt = h_table[slot];

   if (h_BJ64[elt & HASH_MASK2] == bj)
      return elt & HASH_MASK2;
   
   if ((elt & HASH_MASK1) == 0)
      return HASH_NOT_FOUND;

   elt &= HASH_MASK2;
   do
   {
      if (h_BJ64[h_olist[elt] & HASH_MASK2] == bj)
         return h_olist[elt] & HASH_MASK2;
      
      elt = h_olist[elt];
   } while ((elt & HASH_MASK1) == 0);

   return HASH_NOT_FOUND;
}

#if defined(USE_OPENCL)
void collectFactor(ulong   p,
                   ulong   n,
                   int     c,
 volatile __global uint   *factorCount,
          __global long4  *factors)
#else
void collectFactor(ulong       p,
                   ulong       n,
                   int         c,
   volatile device atomic_int *factorCount,
            device long4      *factors)
#endif
{
#if defined(USE_OPENCL)
   int old = atomic_inc(factorCount);
#else
   int old = atomic_fetch_add_explicit(factorCount, 1, memory_order_relaxed);
#endif

   // If we reach the end, stop adding to the buffer.  The CPU code will end
   // with an error as the buffer is not large enough to capture all factors.
   if (old >= MAX_FACTORS)
      return;
   
   factors[old].x = n;
   factors[old].y = c;
   factors[old].z = p;
}
